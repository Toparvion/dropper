group 'tech.toparvion'
version '1.4.1-beta'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.6
compileTestJava.options.encoding = 'UTF-8'
archivesBaseName = "jmint"

repositories {
    mavenCentral()
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile 'org.javassist:javassist:3.20.0-GA'
//    compile 'org.slf4j:slf4j-api:1.7.7'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5.3'
    testCompile group: 'junit', name: 'junit', version: '4.11'
//    testRuntime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
}

jar {
    manifest {
        attributes("Implementation-Title": "jMint",
                "Implementation-Version": version,
                "Implementation-Vendor": "Toparvion",
                "Premain-Class": "tech.toparvion.jmint.JMintAgent",
                "Main-Class": "tech.toparvion.jmint.DropletChecker")
    }
    from {
        (configurations.runtime - configurations.provided)
                .collect({ it.isDirectory() ? it : zipTree(it) })
    }
    exclude ('**/*.g4')  // there is no need to export grammar files as they are already exported via generated parsers
}

task runPainterWithDebug(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.test.runtimeClasspath
                /* + project.files('src/test/java/sampleapp/standalone/painter/slf4j-simple-1.7.7.jar')*/
    main 'sampleapp.standalone.painter.Painter'
    jvmArgs = ['-Dfile.encoding=UTF8',
               '-javaagent:build/libs/jmint-'+version+'.jar=' +
                       'src/test/java/sampleapp/standalone/painter/composite-droplet.zip'
    ].toList()
    debug = true            // Gradle default debug port is 5005
}

// ------------------  definitions for Central Repository compatibility -----------------------------------------------

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}
signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'jMint'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A side effect injection (SEI) Java tool aimed at simplicity of modifications expression'
                url 'http://toparvion.tech'

                scm {
                    connection 'scm:git:git://github.com/Toparvion/jmint.git'
                    developerConnection 'scm:git:ssh://github.com/Toparvion/jmint.git'
                    url 'https://github.com/Toparvion/jmint'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://raw.githubusercontent.com/Toparvion/jmint/master/LICENSE.txt'
                    }
                }

                developers {
                    developer {
                        id 'toparvion'
                        name 'Toparvion'
                        email 'toparvion@gmx.com'
                    }
                }
            }
        }
    }
}